from setuptools import setup, find_packages

requirements = []
long_description = '\n# Naming Standards\n\nA validation package for database table and column names, providing standardized classes for validating and managing table names, column headers, and variable lists.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Features](#features)\n- [Usage](#usage)\n\t- [Table Names](#table-names)\n\t- [Column Names](#column-names)\n\t- [NamedList](#namedlist)\n\t- [ColList](#collist)\n- [Documentation Build Process](#documentation-build-process)\n- [Version](#version)\n\n\n## Installation\n\n```bash\npip install naming_standards\n```\n\n## Features\n\n- **Tablename**: Validates and standardises table names according to database naming conventions\n- **Colname**: Validates column/header names with strict formatting rules (lowercase, underscores allowed)\n- **NamedList**: A list with enforced lowercase and utility methods for name management\n- **ColList**: A validated list for variable names that conform to header naming conventions\n\n## Usage\n\n### Table Names\n\n```python\nfrom naming_standards import Tablename\n\n# Valid table names\nvalid_names = [\n\tTablename("my_table"),        # Standard format\n\tTablename("_private_table"),  # Starting with underscore\n\tTablename("123"),             # Purely numeric\n\tTablename("table123"),        # Mixed alphanumeric\n\tTablename("CustomerData"),    # CamelCase\n]\n\n# Invalid table names (will raise ValueError)\ntry:\n\tTablename("1table")          # Cannot start with digit\nexcept ValueError as e:\n\tprint(e)\n\ntry:\n\tTablename("table-name")      # No hyphens allowed\nexcept ValueError as e:\n\tprint(e)\n\ntry:\n\tTablename("")                # Cannot be empty\nexcept ValueError as e:\n\tprint(e)\n```\n\n### Column Names\n\n```python\nfrom naming_standards import Colname\n\n# Valid header names\nvalid_headers = [\n\tColname("customername"),   # All lowercase letters\n\tColname("order123"),       # Letters and numbers\n\tColname("customer_name"),  # Underscored column name\n\tColname("CUSTOMERNAME"),   # Automatically converted to customername\n\tColname("ORDER123"),       # Automatically converted to order123\n]\n\n# Invalid header names (will raise ValueError)\ntry:\n\tColname("customer name")   # No spaces\nexcept ValueError as e:\n\tprint(e)\n\ntry:\n\tColname("order-date")      # No hyphens\nexcept ValueError as e:\n\tprint(e)\n\ntry:\n\tColname("")                # Cannot be empty\nexcept ValueError as e:\n\tprint(e)\n```\n\n### NamedList\n\n```python\nfrom naming_standards import NamedList\n\n# Create a named list\nvar_list = NamedList(["name", "age", "city"])\nprint(var_list)  # NamedList([\'name\', \'age\', \'city\'])\n\n# Properties and methods\nprint(f"Count: {var_list.count}")  # Count: 3\nprint(var_list.to_json())  # JSON representation\n\n# Set operations\nother_list = ["age", "salary", "department"]\noverlap = var_list.overlap(other_list)\nprint(overlap)  # NamedList([\'age\'])\n\n# Extend with unique values\nvar_list.extend_with(other_list)\nprint(var_list)  # NamedList([\'name\', \'age\', \'city\', \'salary\', \'department\'])\n```\n\n### ColList\n\n```python\nfrom naming_standards import ColList\n\n# Valid variable list\nvalid_vars = ColList(["customerid", "ordernumber", "amount123"])\nprint(valid_vars)  # ColList([\'customerid\', \'ordernumber\', \'amount123\'])\n\n# Invalid variable list (will raise ValueError)\ntry:\n\tinvalid_vars = ColList(["customer id", "order-number", "amount@"])\nexcept ValueError as e:\n\tprint(e)  # Column names must be in correct format\n\n# All NamedList methods are available\nprint(valid_vars.to_json())\nother_vars = ["productid", "customerid"]\noverlap = valid_vars.overlap(other_vars)\nprint(overlap)  # ColList([\'customerid\'])\n```\n\n\n## Documentation Build Process\n\nSee [docs/docsbuild.md](docs/docsbuild.md) for details on building the documentation with Sphinx, including pre-compilation, auto-modules, meta files, and the build process.\n\n## Version\n\n1.0.0'

setup(
    name="naming_standards",
    version="1.0.0",
    author="",
    author_email="",
    description="A python package of a working transforms framework",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="",
    packages=find_packages(include=["naming_standards", "naming_standards.*"]),
    classifiers=[
        "Programming Language :: Python :: 3",
        "Operating System :: OS Independent",
    ],
    python_requires=">=3.10",
    install_requires=requirements
)
