@startuml

skinparam classAttributeIconSize 0

class EventLog{
    event_type
    uuid
    timestamp
    log_location
    __init__(self, event_type, log_location)
    __repr__(self)
    log(self)
}

class PipelineEvent{
    sub_type
    message
    description
    __init__(self, event_type, message, description, log_location)
}

EventLog <|-- PipelineEvent

note top of EventLog
Base class for logging events with unique identifiers and timestamps.

This class provides the foundation for event logging functionality, including
automatic generation of unique identifiers, timestamps, and JSON serialization
capabilities. It serves as the parent class for more specialised event types.

Attributes:
    event_type (str): The type/category of the event.
    uuid (str): A unique identifier for the event.
    timestamp (str): ISO format timestamp when the event was created.
    log_location (str): The file path where the event should be logged.
    
Example:
    >>> event = Event("INFO", "events_log/job_1/events.json")
    >>> event.log()  # Writes event to the specified log file
end note

note top of PipelineEvent
Specialised event class for pipeline operations with additional metadata.

This class extends the base EventLog class to include pipeline-specific information
such as descriptive messages and detailed descriptions. It's designed for logging
data pipeline operations like data loading, transformations, and processing steps.

Attributes:
    sub_type (str): The subtype identifier for pipeline events.
    message (str): A brief message describing the pipeline operation.
    description (str): A detailed description of the pipeline operation.
    
Example:
    >>> event = PipelineEvent(
    ...     event_type="transform",
    ...     message="Data cleaning completed",
    ...     description="Removed 150 null values from column 'age'",
    ...     log_location="events_log/job_1/pipeline_events.json"
    ... )
    >>> event.log()
end note


@enduml